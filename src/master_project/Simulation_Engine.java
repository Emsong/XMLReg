
package master_project;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.Characters;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import static master_project.XMLReg.fChar4T;
import static master_project.XMap.insertPath;
import static master_project.XMap.insertVertex;
import static master_project.XRecursive.InsertStruct;
import org.w3c.dom.Document;
import org.w3c.dom.Element;


/**
 * @author EmySoong
 */

public class Simulation_Engine extends javax.swing.JFrame {

    
    String s = null;
    public File file;
    
    public Simulation_Engine() {
        initComponents();
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jRadioButton15 = new javax.swing.JRadioButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton10 = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jRadioButton12 = new javax.swing.JRadioButton();
        jRadioButton13 = new javax.swing.JRadioButton();
        jRadioButton14 = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton16 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel12 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel5.setText("Approach Selection : ");

        jCheckBox1.setText("jCheckBox1");

        jRadioButton15.setText("jRadioButton15");

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel1.setText("File Selection : ");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel3.setText("XML Document");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane8.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel4.setText("Result :");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        jButton6.setText("Exit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel20.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel20.setText("Storing Approach : ");

        jButton12.setText("XML-Reg");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("XAncestor");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("XRecursive");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("XMap");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton17.setText("Mini-XML");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jButton12)
                    .addComponent(jButton13)
                    .addComponent(jButton15)
                    .addComponent(jButton17)
                    .addComponent(jButton14))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("XML RDB Mapping", jPanel1);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel6.setText("Approach Selection : ");

        jRadioButton1.setText("XML - Reg");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("XAncestor");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.setText("XRecursive");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.setText("XMAP");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jRadioButton8.setText("Mini-XML");
        jRadioButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton8)
                .addGap(25, 25, 25)
                .addComponent(jRadioButton2)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton4)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton8))
                .addGap(14, 14, 14))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel7.setText("Dataset Selection : ");

        jRadioButton5.setText("Sigmod.XML");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jRadioButton6.setText("DBLP.XML");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        jRadioButton7.setText("PSD7003.XML");
        jRadioButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton5)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton6)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton7))
                .addContainerGap())
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel9.setText("Query Selection : ");

        jRadioButton9.setText("Query 1");
        jRadioButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton9ActionPerformed(evt);
            }
        });

        jRadioButton10.setText("Query 2");
        jRadioButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton10ActionPerformed(evt);
            }
        });

        jRadioButton11.setText("Query 4");
        jRadioButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton11ActionPerformed(evt);
            }
        });

        jRadioButton12.setText("Query 3");
        jRadioButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton12ActionPerformed(evt);
            }
        });

        jRadioButton13.setText("Query 5");
        jRadioButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton13ActionPerformed(evt);
            }
        });

        jRadioButton14.setText("Query 6");
        jRadioButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton9)
                .addGap(30, 30, 30)
                .addComponent(jRadioButton10)
                .addGap(37, 37, 37)
                .addComponent(jRadioButton12)
                .addGap(31, 31, 31)
                .addComponent(jRadioButton11)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton13)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton14)
                .addGap(25, 25, 25))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 5, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jRadioButton9)
                    .addComponent(jRadioButton10)
                    .addComponent(jRadioButton11)
                    .addComponent(jRadioButton12)
                    .addComponent(jRadioButton13)
                    .addComponent(jRadioButton14)))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel10.setText("SQL: ");

        jLabel11.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel11.setText("Response Time : ");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel12.setText("Result : ");

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel13.setText("Query Window: ");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jButton16.setText("Load Query");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jButton16))
                .addContainerGap())
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel14.setText("Comparison Result : ");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("XML -Reg");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("XAncestor");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("XRecursive");

        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("XMap");

        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel19.setText("Time (ms) : ");

        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Mini-XML");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7))
                .addGap(48, 48, 48))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)))
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(31, 31, 31)))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel21)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel18)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel12Layout.createSequentialGroup()
                            .addComponent(jLabel17)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jButton7.setText("Exit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Query Retrieval", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
    
    //MiniXML Insertion - DONE
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        Connection conn;
        int id =1;
        String sql;
        int parent = 0;
        int self = 1;
        String path;
        int level =1;
        String pos;
        String value;
        int elementid;
        int svself;

        List<String> parentlist = new ArrayList<String>();
        List<Integer> parentidlist = new ArrayList<Integer>();

        try {
            if (file != null){

                this.jTextArea2.setText(jTextArea2.getText() +"\nXMAP Approach:\n\tFile name: "+file.getName());

                master_project.MiniXML MiniXML = new master_project.MiniXML();

                //DB Connection
                ConnectMSSQLServer connecting = new ConnectMSSQLServer();
                connecting.dbConnect();
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tMicrosoft SQL Server is connected!");

                Statement stmt = Connect.conn.createStatement();

                long DOMstartTime = System.currentTimeMillis();

                //DOM Parser
                DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
                Document doc = documentBuilder.parse(file);

                Element root = doc.getDocumentElement();

                long startTime = System.currentTimeMillis();

                MiniXML.createTable();

                parentlist.add(root.getNodeName());
                parentidlist.add(id);

                pos = "("+ level +",[" + parent +"," + self + "])";
                path = "/" + root.getNodeName();

                sql = " INSERT INTO PathTable_Mini (pathid, path, pos) values ('" + id + "','" + path + "','" + pos+ "')";
                stmt.execute(sql);

                MiniXML.treeBrowser(root,level);

                long stopTime = System.currentTimeMillis();

                double elapsedTime = (stopTime - startTime);
                double elapsedTimeDOM = (stopTime - DOMstartTime);
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime Taken: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime with DOM: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime without DOM =  "+ elapsedTime + " ms \n\tThe Mapping Process Done!");

                connecting.dbConnect_Close();

            }else {
                JOptionPane.showMessageDialog(this,"Please Select the XML File First");
            }
        } catch (Exception e) {
            e.printStackTrace();   }
    }//GEN-LAST:event_jButton17ActionPerformed

    //XMAP Insertion - DONE
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed

        Connection conn;
        Stack stackVertex = new Stack();
        Stack stackPath = new Stack();
        String PathParentPos;
        String PathPosition = "1";
        String AttrPathPosition;
        String sql;
        String value;
        int vertexId = 0;
        String path;
        int id = 1 ;
        int pathId = 0;
        int numberAttribute;
        String OrdParentPos;
        String sparent = "1";
        String sid;
        int vId;
        String length;
        int pathValue;
        int numberElement;
        String PathPos;

        try {
            if (file != null){

                this.jTextArea2.setText(jTextArea2.getText() +"\nXMAP Approach:\n\tFile name: "+file.getName());

                master_project.XMap XMap = new master_project.XMap();

                //DB Connection
                ConnectMSSQLServer connecting = new ConnectMSSQLServer();
                connecting.dbConnect();
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tMicrosoft SQL Server is connected!");

                Statement stmt = Connect.conn.createStatement();

                long DOMstartTime = System.currentTimeMillis();

                //DOM Parser
                DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
                Document doc = documentBuilder.parse(file);

                Element root = doc.getDocumentElement();

                long startTime = System.currentTimeMillis();

                XMap.CreateTable();

                vertexId++;
                stackVertex.add(root.getNodeName());

                path = "1";

                pathId++;
                stackPath.add(path);

                String s = "INSERT INTO Data_XMap (ORDPath, Node_Value,Order_id, numberElement,numberAttribute,pathId) values ('" + id + "','" + null + "','" + id + "','" + root.getChildNodes().getLength() + "','" + 0 +  "','" + pathId +"')";
                stmt.execute(s);

                XMap.treeBrowser(root);
                insertVertex();
                insertPath();

                long stopTime = System.currentTimeMillis();

                double elapsedTime = (stopTime - startTime);
                double elapsedTimeDOM = (stopTime - DOMstartTime);
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime Taken: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime with DOM: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime without DOM =  "+ elapsedTime + " ms \n\tThe Mapping Process Done!");

                connecting.dbConnect_Close();

            }else {
                JOptionPane.showMessageDialog(this,"Please Select the XML File First");
            }
        } catch (Exception e) {
            e.printStackTrace();   }
    }//GEN-LAST:event_jButton15ActionPerformed

    //XRecursive Insertion - Done
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed

        Connection conn;
        String type = null;
        String name = null;
        String value = null;
        String parent = null;
        int id;
        String sql;

        try {
            if (file != null){

                this.jTextArea2.setText(jTextArea2.getText() +"\nXRecursive Approach:\n\tFile name: "+file.getName());

                master_project.XRecursive XRecursive = new master_project.XRecursive();

                //DB Connection
                ConnectMSSQLServer connecting = new ConnectMSSQLServer();
                connecting.dbConnect();
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tMicrosoft SQL Server is connected!");

                Statement stmt = Connect.conn.createStatement();

                long DOMstartTime = System.currentTimeMillis();

                //DOM Parser
                DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
                Document doc = documentBuilder.parse(file);

                Element root = doc.getDocumentElement();
                name = doc.getDocumentElement().getNodeName();

                long startTime = System.currentTimeMillis();

                XRecursive.CreateTable();

                id = 1;
                InsertStruct();

                XRecursive.ReadXML(root);

                long stopTime = System.currentTimeMillis();

                double elapsedTime = (stopTime - startTime);
                double elapsedTimeDOM = (stopTime - DOMstartTime);
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime Taken: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime with DOM: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime without DOM =  "+ elapsedTime + " ms \n\tThe Mapping Process Done!");

                connecting.dbConnect_Close();

            }else {
                JOptionPane.showMessageDialog(this,"Please Select the XML File First");
            }
        } catch (Exception e) {
            e.printStackTrace();   }
    }//GEN-LAST:event_jButton14ActionPerformed

    //XAncestor Insertion - Done
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {
            if (file != null){

                this.jTextArea2.setText(jTextArea2.getText() +"\nXAncestor Approach:\n\tFile name: "+file.getName());

                master_project.XAncestor XAncestor = new master_project.XAncestor();

                //DB Connection
                ConnectMSSQLServer connecting = new ConnectMSSQLServer();
                connecting.dbConnect();
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tMicrosoft SQL Server is connected!");

                long DOMstartTime = System.currentTimeMillis();

                //DOM Parser
                DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
                Document doc = documentBuilder.parse(file);

                NodeInfo Node_Child = new NodeInfo();
                Root.StRootname = doc.getDocumentElement().getNodeName();
                Root.doc_root = doc.getDocumentElement();
                XAncestor.SetPathArray();
                XAncestor.setfields();

                long startTime = System.currentTimeMillis();

                XAncestor.CreateTable();
                Node_Child.ReadXML(doc.getDocumentElement(), "1");

                long stopTime = System.currentTimeMillis();

                double elapsedTime = (stopTime - startTime);
                double elapsedTimeDOM = (stopTime - DOMstartTime);
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime Taken: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime with DOM: " + elapsedTimeDOM);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime without DOM =  "+ elapsedTime + " ms \n\tThe Mapping Process Done!");

            }
            else {
                JOptionPane.showMessageDialog(this,"Please Select the XML File First");
            }
        } catch (Exception e) {
            e.printStackTrace();   }
    }//GEN-LAST:event_jButton13ActionPerformed

    //XML-REG Storing - DONE
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed

        int id = 0;
        int level = 0;
        String qName = null;
        String path = "";
        int pathid = 0;
        String elementValue;
        String sql;
        Connection conn;
        int existvalue;
        int pathvalue;
        String attrPath;
        String str = "";
        Stack stackPath = new Stack();

        try {
            if (file != null){

                this.jTextArea2.setText(jTextArea2.getText() +"\nXML-REG Approach:\n\tFile name: "+file.getName());

                master_project.XMLReg XMLReg = new master_project.XMLReg();

                //DB Connection
                ConnectMSSQLServer connecting = new ConnectMSSQLServer();
                connecting.dbConnect();
                Statement stmt = Connect.conn.createStatement();

                this.jTextArea2.setText(jTextArea2.getText() +"\n\tMicrosoft SQL Server is connected!");
                Statement s = Connect.conn.createStatement();

                //Start time count STAX
                long staxStartTime = System.currentTimeMillis();

                //StAX Parser
                XMLInputFactory factory = XMLInputFactory.newInstance();
                XMLEventReader eventReader = factory.createXMLEventReader(new FileReader(file));

                //Start time count
                long startTime = System.currentTimeMillis();

                //Link to Function in XML_Reg
                XMLReg.createTable();

                //Insertion Algorithm
                while(eventReader.hasNext()) {
                    XMLEvent event = eventReader.nextEvent();

                    String currentpath = path;

                    switch(event.getEventType()) {

                        //DONE
                        case XMLStreamConstants.START_ELEMENT:
                        {
                            str = path;
                            id++;
                            level++;
                            StartElement startElement = event.asStartElement();
                            qName = startElement.getName().getLocalPart();

                            path =  currentpath + "/" + qName;

                            if(!stackPath.contains(path)){
                                pathid++;
                                stackPath.add(path);
                            }

                            //Attribute node
                            Iterator<Attribute> attributes = startElement.getAttributes();

                            while (attributes.hasNext()){

                                id++;
                                level++;

                                Attribute attr = attributes.next();

                                String attrName = "@" + attr.getName();
                                String attrValue = fChar4T(attr.getValue());
                                attrPath = path + "/" + attrName;

                                if (!stackPath.contains(attrPath)){
                                    pathid ++;
                                    stackPath.add(attrPath);
                                }

                                pathvalue = stackPath.indexOf(attrPath) + 1;
                                sql = " INSERT INTO ValueTable_Reg (Level, ID, value, RPathId) values ('" + level + "','" +  id  + "','" + attrValue + "','" + pathvalue + "')";
                                stmt.execute(sql);

                                level--;
                            }
                        }
                        break;

                        //text node ONLY, no attribute value
                        case XMLStreamConstants.CHARACTERS:
                        {
                            Characters characters = event.asCharacters();
                            elementValue = characters.getData();
                            String value = fChar4T(characters.getData());

                            //text
                            if(!elementValue.trim().isEmpty() && qName != null){

                                pathvalue = stackPath.indexOf(path) + 1;

                                sql = " INSERT INTO ValueTable_Reg (Level, ID, value, RPathId) values ('" + level + "','" +  id + "','" + value + "','" + pathvalue + "')";
                                stmt.execute(sql);

                                qName = null;
                            }
                            break;
                        }

                        case XMLStreamConstants.END_ELEMENT:
                        {
                            EndElement endElement = event.asEndElement();
                            String eName = endElement.getName().getLocalPart();
                            String pathlast = path.substring(path.lastIndexOf("/") + 1);

                            if (pathlast.equals(eName)){
                                path = path.substring(0, path.lastIndexOf("/"));
                            }

                            level--;
                            break;
                        }
                    }
                }

                while (!stackPath.empty()){
                    //System.out.println(pathid + path);
                    sql = " INSERT INTO PathTable_Reg (pathid, pathexp) values ('" + pathid + "','" + stackPath.pop() + "')";
                    stmt.execute(sql);
                    pathid--;
                }
                //insertPath();

                long stopTime = System.currentTimeMillis();

                double elapsedTime = (stopTime - startTime);
                double elapsedTimestax = (stopTime - staxStartTime);
                this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime Taken: " + elapsedTimestax);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime with STaX: " + elapsedTimestax);
                //this.jTextArea2.setText(jTextArea2.getText() +"\n\tTime without STaX =  "+ elapsedTime + " ms \n\tThe Mapping Process Done!");
            }else {
                JOptionPane.showMessageDialog(this,"Please Select the XML File First");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        try {
            Connect.conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Simulation_Engine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    // XML - RDB ->> Exit button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int x= JOptionPane.showConfirmDialog(this, "Are You Sure Exit the Program ?","Exit Confirm",JOptionPane.YES_NO_OPTION);

        if (x== JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    //Browse Button --> File Chooser
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        file = chooser.getSelectedFile();
        String filename = file.getAbsolutePath();
        jTextField1.setText(filename);

        //Display file content to text area
        try{
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            jTextArea1.read(br, null);
            br.close();
            jTextArea1.requestFocus();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    //Query retrieval - exit button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int x= JOptionPane.showConfirmDialog(this, "Are You Sure Exit the Program ?","Exit Confirm",JOptionPane.YES_NO_OPTION);

        if (x== JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed

        if(!jTextArea4.equals("")){
            try {
                //XML-Reg
                if(jRadioButton1 .isSelected())
                loadquery(jTextArea4.getText());
                //XAncestor
                else if(jRadioButton2.isSelected())
                loadquery(jTextArea4.getText());
                //XRecursive
                else if(jRadioButton3.isSelected())
                    loadquery(jTextArea4.getText());               
                //XMAP
                else if(jRadioButton4.isSelected())
                loadquery(jTextArea4.getText());
                //Mini-XML
                else if(jRadioButton8.isSelected())
                loadquery(jTextArea4.getText());
            } catch (SQLException ex) {
                Logger.getLogger(Simulation_Engine.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Simulation_Engine.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        System.out.println("load field fail: no SQL query. ");
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    //Query 6
    private void jRadioButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton14ActionPerformed
        //Approach:XML-REG
        if(jRadioButton1.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XML-REG\nQuery pattern: //article/title/[initPage=3]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select Distinct *\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where p.pathExp  like '%article%initPage' and L.Value= '3' and L.rpathid = P.pathid)S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where p.pathExp  like '%article%title' and L.rpathid = P.pathid) S1 \n" +
                    "ON S1.ID = S.ID -1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XML-REG\nQuery pattern: //article//tt/[year=1997]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT MIN(mingap) FROM (Select Distinct S1.id, S1.value, MIN(S.id- S1.id) as mingap\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P\n" +
                    "Where p.pathExp  like '%article%year' and L.Value like '1997' and L.rpathid = P.pathid)S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L1, [XMLREG].[dbo].[Pathtable_DBLP] P1\n" +
                    "Where p1.pathExp  like '%article%tt' and L1.rpathid = P1.pathid) S1 \n" +
                    "ON S.id - S1.id > 0\n" +
                    "GROUP BY S1.id, S1.value) Z1");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XML-REG\nQuery pattern: //refinfo[citation]/volume= '241'");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp Like '%refinfo/citation')\n" +
                    "Set @pathdescription = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp Like '%refinfo/volume')\n" +
                    "SELECT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_psd] V1, [XMLREG].[dbo].[ValueTable_psd] V2\n" +
                    "WHERE V2.Value = '241' and V1.RPathId = @pathtype \n" +
                    "and V2.RPathId = @pathdescription and V1.ID = V2.ID -1");
            }
        }
        //Approach: XAncestor
        else if(jRadioButton2.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XAncestor\nQuery pattern: //article/title/[initPage=3]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM (Select distinct L.Node_Name, L.Node_Value, L.Ances_PathID, p.Ances_PathExp, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where L.Ances_PathID = P.Ances_PathID AND p.Ances_PathExp LIKE '%article%' \n" +
                    "And L.Node_Name = 'initPage' And L.Node_Value = '3') S\n" +
                    "JOIN (Select DISTINCT L.Node_Name, L.Node_Value, L.Ances_PathID, p.Ances_PathExp, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where p.Ances_PathExp LIKE '%article'  And L.Node_Name = 'title' ) S1\n" +
                    "ON S.Ances_Pos like s1.Ances_Pos + '%'");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XAncestor\nQuery pattern: //article//tt/[year=1997]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM (Select distinct l1.Node_Name, l1.Node_Value, L1.Ances_PathID, p.Ances_PathExp, L1.Ances_Pos\n" +
                    "From [XAncestor].[dbo].[Leaf_Node_DBLP] L1, [XAncestor].[dbo].[Ancestor_Path_DBLP] P \n" +
                    "Where L1.Ances_PathID = P.Ances_PathID AND p.Ances_PathExp LIKE '%article%' \n" +
                    "And L1.Node_Name = 'tt') S\n" +
                    "JOIN (Select DISTINCT l1.Node_Name, l1.Node_Value, L1.Ances_PathID, p.Ances_PathExp, L1.Ances_Pos\n" +
                    "From [XAncestor].[dbo].[Leaf_Node_DBLP] L1, [XAncestor].[dbo].[Ancestor_Path_DBLP] P \n" +
                    "Where p.Ances_PathExp LIKE '%article'  And L1.Node_Name = 'year' And L1.Node_Value like '1997') S1\n" +
                    "ON S.Ances_Pos like s1.Ances_Pos + '%'");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XAncestor\nQuery pattern: //refinfo[citation]/volume= '241'");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select DISTINCT S1.Ances_PathExp, S1.Node_Name,S.Ances_Pos\n" +
                    "FROM (Select distinct l1.Node_Name, l1.Node_Value, L1.Ances_PathID, p.Ances_PathExp, L1.Ances_Pos\n" +
                    "From [XAncestor].[dbo].[Leaf_Node_Psd] L1, [XAncestor].[dbo].[Ancestor_Path_Psd] P \n" +
                    "Where p.Ances_PathExp LIKE '%refinfo' \n" +
                    "And L1.Ances_PathID = P.Ances_PathID And L1.Node_Name = 'volume' \n" +
                    "And L1.Node_Value like '241') S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT l1.Node_Name, l1.Node_Value, L1.Ances_PathID, p.Ances_PathExp, L1.Ances_Pos\n" +
                    "From [XAncestor].[dbo].[Leaf_Node_Psd] L1, [XAncestor].[dbo].[Ancestor_Path_Psd] P \n" +
                    "Where p.Ances_PathExp LIKE '%refinfo'  And L1.Node_Name = 'citation' ) S1\n" +
                    "ON S.Ances_Pos = S1.Ances_Pos");
            }
        }
        //Approach: Mini-XML
        else if(jRadioButton8.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: Mini-XML\nQuery pattern: //article/title/[initPage=3]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT * \n" +
                    "FROM (SELECT S1.Path, S.Value as lvalue, S.LeafId as lLeafid, S1.Value, S1.LeafId, Min(s.leafid - S1.leafid) as mingap\n" +
                    "FROM (Select DISTINCT L0.value, L0.leafid, P0.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P0, [Mini-XML].[dbo].[LeafTable_Sigmod] L0\n" +
                    "Where P0.path LIKE '%article' and L0.name = 'initPage' and L0.value = '3')S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L1.value, L1.leafid, P1.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P1, [Mini-XML].[dbo].[LeafTable_Sigmod] L1\n" +
                    "Where P1.path like '%article%' and L1.name = 'title' and P1.pathid < L1.leafid)S1\n" +
                    "ON S1.Path = S.Path \n" +
                    "Group by S1.Path, S.Value, S.LeafId, S1.Value, S1.LeafId ) S\n" +
                    "WHERE mingap = 1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: Mini-XML\nQuery pattern: //article//tt/[year=1997]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT * \n" +
                    "FROM (SELECT S1.Path, S.Value as lvalue, S.LeafId as lLeafid, S1.Value, S1.LeafId, Min(s.leafid - S1.leafid) as mingap\n" +
                    "FROM (Select DISTINCT L0.leafid,L0.value,P0.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P0, [Mini-XML].[dbo].[LeafTable_dblp] L0\n" +
                    "Where P0.path LIKE '%article' and L0.name = 'year' and L0.value = '1997')S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L1.value, L1.leafid, P1.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P1, [Mini-XML].[dbo].[LeafTable_dblp] L1\n" +
                    "Where P1.path like '%article' and L1.name = 'tt' and P1.pathid < L1.leafid)S1\n" +
                    "ON S1.Path = S.Path and s.leafid - S1.leafid > 0\n" +
                    "Group by S1.Path, S.Value, S.LeafId, S1.Value, S1.LeafId ) S\n" +
                    "WHERE mingap = \n" +
                    "(SELECT MIN(mingap)\n" +
                    "FROM (SELECT S1.Path, S.Value as lvalue, S.LeafId as lLeafid, S1.Value, S1.LeafId, Min(s.leafid - S1.leafid) as mingap\n" +
                    "FROM (Select DISTINCT L0.leafid,L0.value,P0.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P0, [Mini-XML].[dbo].[LeafTable_dblp] L0\n" +
                    "Where P0.path LIKE '%article' and L0.name = 'year' and L0.value = '1997')S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L1.value, L1.leafid, P1.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P1, [Mini-XML].[dbo].[LeafTable_dblp] L1\n" +
                    "Where P1.path like '%article' and L1.name = 'tt' and P1.pathid < L1.leafid)S1\n" +
                    "ON S1.Path = S.Path and  s.leafid - S1.leafid > 0\n" +
                    "Group by S1.Path, S.Value, S.LeafId, S1.Value, S1.LeafId) F )");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: Mini-XML\nQuery pattern: //refinfo[citation]/volume= '241'");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("SELECT DISTINCT S.LeafId\n" +
                    "FROM ( Select DISTINCT L.leafid,L.value, P.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where P.path LIKE '%refinfo' and L.name = 'volume' and L.value = '241')S\n" +
                    "JOIN \n" +
                    "(Select DISTINCT L.leafid,L.value, P.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where P.path like '%refinfo' and L.name = 'citation') S1\n" +
                    "ON S.LeafId > S1.LeafId");
            }
        }
        //Approach: XMAP
        else if(jRadioButton4.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nXMAP: XMAP\nQuery pattern: //article/title/[initPage=3]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT *\n" +
                    "FROM (SELECT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D \n" +
                    "JOIN (Select Z1.id, Z1.path\n" +
                    "FROM (Select P.id, P.Path\n" +
                    "FROM [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%' + S1.id + '%')Z1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'initPage') Z2\n" +
                    "ON Z1.path like '%.' + Z2.id )Y \n" +
                    "on D.pathid = Y.id and D.node_value = '3') I1 -- one group\n" +
                    "JOIN (SELECT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D \n" +
                    "JOIN (Select Z1.id, Z1.path\n" +
                    "FROM (Select P.id, P.Path\n" +
                    "FROM [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%' + S1.id + '%')Z1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'endPage') Z2\n" +
                    "ON Z1.path like '%.' + Z2.id )Y \n" +
                    "on D.pathid = Y.id ) I2 -- one group\n" +
                    "ON I2.order_id = I1.order_id +1 and I2.Node_Value != ''");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nXMAP: XMAP\nQuery pattern: //article//tt/[year=1997]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT * FROM\n" +
                    "(SELECT Z.ID, Z.Node_Value,Z2.ID as zid,Z2.Node_Value as zvalue, MIN(Z2.Order_id - Z.Order_id) as mingap FROM\n" +
                    "(Select DISTINCT * \n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'tt') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value NOT like '.' and D.ORDPath like '%.%.%.%') Z\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'year') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value like '1997') Z2\n" +
                    "ON Z2.Order_id - Z.Order_id >0\n" +
                    "GROUP BY Z.ID, Z.Node_Value,Z2.ID,Z2.Node_Value) H\n" +
                    "WHERE mingap =\n" +
                    "(SELECT MIN(mingap) FROM(SELECT Z.ID, Z.Node_Value,Z2.ID as zid ,Z2.Node_Value as zvalue, MIN(Z2.Order_id - Z.Order_id) as mingap FROM\n" +
                    "(Select DISTINCT * \n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'tt') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value NOT like '.' and D.ORDPath like '%.%.%.%') Z\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'year') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U \n" +
                    "ON D.PathID = U.ID and D.Node_Value like '1997') Z2\n" +
                    "ON Z2.Order_id - Z.Order_id >0\n" +
                    "GROUP BY Z.ID, Z.Node_Value,Z2.ID,Z2.Node_Value)G)");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nXMAP: XMAP\nQuery pattern: //refinfo[citation]/volume= '241'");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathcitation int, @pathvolume int\n" +
                    "SET @pathcitation = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'refinfo') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'citation') T2\n" +
                    "ON T1.Path like '%.' + T2.id )\n" +
                    "SET @pathvolume = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'refinfo') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'volume') T2\n" +
                    "ON T1.Path like '%.' + T2.id )\n" +
                    "SELECT DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_psd] D1, [XMap].[dbo].[Data_psd] D2\n" +
                    "WHERE D1.PathID = @pathcitation and D2.PathID = @pathvolume\n" +
                    "and D1.Order_id = D2.Order_id -1 and D2.Node_Value = '241'");
            }
        }
        //Approach:XRecursive
        if(jRadioButton3.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XRecursive\nQuery pattern: //article/title/[initPage=3]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XRecursive\nQuery pattern: //article//tt/[year=1997]");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 3 ------\nApproach: XRecursive\nQuery pattern: //refinfo[citation]/volume= '241'");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Not supported.");
            }
        }
    }//GEN-LAST:event_jRadioButton14ActionPerformed

    //Query 5
    private void jRadioButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton13ActionPerformed
        //Approach:XML-REG
        if(jRadioButton1.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XML-REG\nQuery pattern: //issue//[initPage=9]//endPage");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select Distinct S1.id, S1.value\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where p.pathExp  like '%issue%initPage' and L.Value = '9' and L.rpathid = P.pathid)S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where P.pathExp  like '%issue%endPage' and L.rpathid = P.pathid) S1 \n" +
                    "ON S1.id = S.ID +1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XML-REG\nQuery pattern: //inproceedings//[key=conf%]//tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select Distinct S1.id, S1.value\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P\n" +
                    "Where p.pathExp  like '%inproceedings%key' and L.Value like 'conf%' and L.rpathid = P.pathid)S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L1, [XMLREG].[dbo].[Pathtable_DBLP] P1\n" +
                    "Where p1.pathExp  like '%inproceedings%tt' and L1.rpathid = P1.pathid) S1 \n" +
                    "ON S1.id - S.id > 0");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XML-REG\nQuery pattern://ProteinEntry//[feature-type=modified-site]//description");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp like '%ProteinEntry%feature-type')\n" +
                    "Set @pathdescription = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp like '%ProteinEntry%description' and P.PathId =@pathtype +1)\n" +
                    "SELECT DISTINCT V2.Value\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_psd] V1, [XMLREG].[dbo].[ValueTable_psd] V2\n" +
                    "WHERE V1.Value = 'modified-site' and V1.RPathId = @pathtype \n" +
                    "and V2.RPathId = @pathdescription and V1.ID = V2.ID -1");
            }
        }
        //Approach: XAncestor
        else if(jRadioButton2.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XAncestor\nQuery pattern: //issue//[initPage=9]//endPage");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT *\n" +
                    "FROM (SELECT DISTINCT L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where P.Ances_PathExp like '%issue%' and L.Node_Name = 'initPage' and L.Node_Value = '9' and P.Ances_Pathid = L.Ances_Pathid) S\n" +
                    "JOIN\n" +
                    "(SELECT DISTINCT  L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where P.Ances_PathExp like '%issue%' and L.Node_Name = 'endPage' and P.Ances_Pathid = L.Ances_Pathid) S1\n" +
                    "ON S1.Ances_Pos like S.Ances_Pos + '%'");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XAncestor\nQuery pattern: //inproceedings//[key=conf%]//tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT DISTINCT S1.Node_value, S1.Node_Name\n" +
                    "FROM (SELECT DISTINCT L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Dblp] L,\n" +
                    "[XAncestor].[dbo].[Ancestor_Path_Dblp] P \n" +
                    "Where P.Ances_PathExp like '%inproceedings%' and L.Node_Name = '@key' and L.Node_Value like 'conf%' and P.Ances_Pathid = L.Ances_Pathid) S\n" +
                    "JOIN\n" +
                    "(SELECT DISTINCT  L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Dblp] L,\n" +
                    "[XAncestor].[dbo].[Ancestor_Path_Dblp] P \n" +
                    "Where P.Ances_PathExp like '%inproceedings%' and L.Node_Name = 'tt' and P.Ances_Pathid = L.Ances_Pathid) S1\n" +
                    "ON S1.Ances_Pos like S.Ances_Pos + '%'");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XAncestor\nQuery pattern: //ProteinEntry//[feature-type=modified-site]//description");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("SELECT Distinct Z2.Node_Value FROM \n" +
                    "(SELECT P.Ances_PathID,P.Ances_PathExp, L.Ances_Pos,L.Node_Name,L.Node_Value FROM [XAncestor].[dbo].[Leaf_Node_Psd] L, [XAncestor].[dbo].[Ancestor_Path_Psd] P \n" +
                    "WHERE L.Node_Name ='feature-type' and L.Node_value = 'modified-site' and P.Ances_pathexp like '%ProteinEntry%' and P.Ances_PathID = L.Ances_PathID) Z1\n" +
                    "JOIN\n" +
                    "(SELECT  P.Ances_PathID,P.Ances_PathExp, L.Ances_Pos,L.Node_Name,L.Node_Value FROM [XAncestor].[dbo].[Leaf_Node_Psd] L, [XAncestor].[dbo].[Ancestor_Path_Psd] P \n" +
                    "WHERE L.Node_Name ='description' and P.Ances_pathexp like '%ProteinEntry%' and P.Ances_PathID = L.Ances_PathID) Z2\n" +
                    "ON Z1.Ances_Pos = Z2.Ances_Pos");
            }
        }
        //Approach: Mini-XML
        else if(jRadioButton8.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: Mini-XML\nQuery pattern: //issue//[initPage=9]//endPage");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT S1.Value\n" +
                    "FROM (Select DISTINCT L.leafid,L.value, P.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P, [Mini-XML].[dbo].[LeafTable_Sigmod] L\n" +
                    "Where P.path LIKE '%issue%' and L.name = 'initPage' and L.value = '9')S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L.leafid, L.value, P.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P, [Mini-XML].[dbo].[LeafTable_Sigmod] L\n" +
                    "Where P.path like '%issue%' and L.name = 'endPage')S1\n" +
                    "ON S1.LeafId = S.LeafId +1 ");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: Mini-XML\nQuery pattern: //inproceedings//[key=conf%]//tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT DISTINCT Y.value\n" +
                    "FROM (SELECT S1.Path, S.Value as lvalue, S.LeafId as lLeafid, S1.Value, S1.LeafId, Min(s.leafid - S1.leafid) as mingap\n" +
                    "FROM (Select DISTINCT L0.leafid,L0.value,P0.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P0, [Mini-XML].[dbo].[LeafTable_dblp] L0\n" +
                    "Where P0.path LIKE '%article' and L0.name = '@key' and L0.value like 'conf%')S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L1.value, L1.leafid, P1.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P1, [Mini-XML].[dbo].[LeafTable_dblp] L1\n" +
                    "Where P1.path like '%article' and L1.name = 'tt' and P1.pathid < L1.leafid)S1\n" +
                    "ON S1.Path = S.Path and  s.leafid - S1.leafid > 0\n" +
                    "Group by S1.Path, S.Value, S.LeafId, S1.Value, S1.LeafId) Y");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: Mini-XML\nQuery pattern: //ProteinEntry//[feature-type=modified-site]//description");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("SELECT DISTINCT Y2.Value FROM (SELECT Z1.LeafId, Z1.Name,Z1.Value FROM (Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "WHERE L.name = 'feature-type' and L.value = 'modified-site' ) Z1\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P\n" +
                    "Where P.path like '%ProteinEntry%') Z2\n" +
                    "ON Z1.LeafId = Z2.PathId+1 )Y1\n" +
                    "JOIN \n" +
                    "(Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "WHERE L.name = 'description') Y2\n" +
                    "ON Y1.LeafId = Y2.LeafId - 1");
            }
        }
        //Approach: XMAP
        else if(jRadioButton4.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nXMAP: XMAP\nQuery pattern: //issue//[initPage=9]//endPage");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT Y2.Node_Value\n" +
                    "FROM (Select DISTINCT U.ID,D.Order_id,D.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'issue') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'initPage') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value = '9') Y1\n" +
                    "JOIN (SELECT DISTINCT U.id,D.Order_id,D.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'endPage') T1\n" +
                    "ON P.Path like '%.' + T1.id) U\n" +
                    "ON  D.PathID = U.ID)Y2\n" +
                    "ON Y1.Order_id = Y2.Order_id-1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nXMAP: XMAP\nQuery pattern: //inproceedings//[key=conf%]//tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT DISTINCT V1.ID, V1.Node_Value\n" +
                    "FROM\n" +
                    "(Select DISTINCT * \n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'inproceedings') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'tt') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value NOT like '.') V1\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'inproceedings') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = '@key') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U \n" +
                    "ON D.PathID = U.ID and D.Node_Value like 'conf%' )V2\n" +
                    "ON V1.Order_id- V2.Order_id > 0\n" +
                    "GROUP BY V1.ID, V1.Node_Value, V2.ID,V2.Node_Value");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nXMAP: XMAP\nQuery pattern: //ProteinEntry//[feature-type=modified-site]//description");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'ProteinEntry') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'feature-type') T2\n" +
                    "ON T1.Path like '%.' + T2.id )\n" +
                    "SET @pathdescription = @pathtype + 1\n" +
                    "SELECT DISTINCT D2.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_psd] D1, [XMap].[dbo].[Data_psd] D2\n" +
                    "WHERE D1.PathID = @pathtype and D2.PathID = @pathdescription\n" +
                    "and D1.Order_id = D2.Order_id -1 and D1.Node_Value = 'modified-site'");
            }
        }
        //Approach:XRecursive
        if(jRadioButton3.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XRecursive\nQuery pattern: //issue//[initPage=9]//endPage");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XRecursive\nQuery pattern: //inproceedings//[key=conf%]//tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 2 ------\nApproach: XRecursive\nQuery pattern: //ProteinEntry//[feature-type=modified-site]//description");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Not supported.");
            }
        }
    }//GEN-LAST:event_jRadioButton13ActionPerformed

    //Query 3
    private void jRadioButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton12ActionPerformed
        //Approach:XML-REG
        if(jRadioButton1.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XML-REG\nQuery pattern:  //article/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT L.ID,L.Value\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where p.pathExp like '%article/title' \n" +
                    "And L.RPathID = P.PathID ");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XML-REG\nQuery pattern: //mastersthesis/authors");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select * \n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P\n" +
                    "Where p.pathExp like '%mastersthesis/author' \n" +
                    "And L.RPathID = P.PathID ");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XML-REG\nQuery pattern: //refinfo/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int\n" +
                    "SET @pathtype = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'refinfo') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'title') S2\n" +
                    "ON T1.Path like '%.' + S2.id )\n" +
                    "SELECT *\n" +
                    "FROM [XMap].[dbo].[Data_psd] D\n" +
                    "WHERE D.PathID = @pathtype ");
            }
        }
        //Approach: XAncestor
        else if(jRadioButton2.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XAncestor\nQuery pattern:  //article/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select * \n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where P.Ances_PathExp Like '%/article' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'title'");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XAncestor\nQuery pattern: //mastersthesis/authors");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select * \n" +
                    "From [XAncestor].[dbo].[Leaf_Node_Dblp] L,\n" +
                    "[XAncestor].[dbo].[Ancestor_Path_Dblp] P \n" +
                    "Where P.Ances_PathExp Like '%/mastersthesis' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'author'");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XAncestor\nQuery pattern://refinfo/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select * \n" +
                    "From [XAncestor].[dbo].[Leaf_Node_PSD] L,\n" +
                    "[XAncestor].[dbo].[Ancestor_Path_PSD] P \n" +
                    "Where P.Ances_PathExp Like '%refinfo' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'title'");
            }
        }
        //Approach: Mini-XML
        else if(jRadioButton8.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: Mini-XML\nQuery pattern: //article/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P, [Mini-XML].[dbo].[LeafTable_Sigmod] L\n" +
                    "Where p.path like '%/article'\n" +
                    "and L.name = 'title' \n" +
                    "and P.pathid = L.leafid - 1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: Mini-XML\nQuery pattern: //mastersthesis/authors");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select L.leafid,L.value, L.name,L.Pos, P.pos\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P, [Mini-XML].[dbo].[LeafTable_dblp] L\n" +
                    "Where p.path like '%/mastersthesis'\n" +
                    "and L.name = 'author' \n" +
                    "and P.pathid = L.leafid -2\n" +
                    "Group by L.leafid,L.value, L.name,L.Pos, P.pos");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: Mini-XML\nQuery pattern: //refinfo/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select DISTINCT L.leafid,L.value\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where path like '%refinfo' \n" +
                    "And L.Name = 'title'");
            }
        }
        //Approach: XMAP
        else if(jRadioButton4.isSelected()){
            //yahoo dataset
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nXMAP: XMAP\nQuery pattern: //article/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT U.ID, D.Order_id,D.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'title') T2\n" +
                    "ON T1.Path like '%' + T2.id) U\n" +
                    "ON D.PathID = U.ID");
                //DBLP dataset
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nXMAP: XMAP\nQuery pattern: //mastersthesis/authors");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID, T1.Path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'mastersthesis') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'author') T2\n" +
                    "ON T1.Path like '%' + T2.id) U\n" +
                    "ON D.PathID = U.ID ");
                //psd dataset
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nXMAP: XMAP\nQuery pattern: //refinfo/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int\n" +
                    "SET @pathtype = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'refinfo') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'title') S2\n" +
                    "ON T1.Path like '%.' + S2.id )");
            }
        }
        //Approach:XRecursive
        if(jRadioButton3.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XRecursive\nQuery pattern: //article/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XRecursive\nQuery pattern: //mastersthesis/authors");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 3 ------\nApproach: XRecursive\nQuery pattern://refinfo/title");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Not supported.");
            }
        }
    }//GEN-LAST:event_jRadioButton12ActionPerformed

    //Query 4
    private void jRadioButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton11ActionPerformed
        //Approach:XML-REG
        if(jRadioButton1.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XML-REG\nQuery pattern: /SigmodRecord/issue/[volume=24]/number");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT V2.ID\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN  (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'volume') T2\n" +
                    "ON P.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value = '24') V\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'number') T2\n" +
                    "ON P.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID) V2\n" +
                    "ON V.Order_id = V2.order_id -1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XML-REG\nQuery pattern: /dblp/mastersthesis[year=1992]/school");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select DISTINCT *  \n" +
                    "FROM ( Select DISTINCT * \n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P\n" +
                    "Where p.pathExp  = '/dblp/mastersthesis/year' and L.Value = '1992'and P.pathid = L.Rpathid) S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P\n" +
                    "Where p.pathExp  = '/dblp/mastersthesis/school' and P.pathid = L.Rpathid) S1 \n" +
                    "ON  S1.ID = S.ID +1");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XML-REG\nQuery pattern: /ProteinDatabase/ProteinEntry/header[uid like'X%']/accession");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp = '/ProteinDatabase/ProteinEntry/header/uid')\n" +
                    "Set @pathdescription = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp = '/ProteinDatabase/ProteinEntry/header/accession')\n" +
                    "SELECT DISTINCT V2.Value\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_psd] V1, [XMLREG].[dbo].[ValueTable_psd] V2\n" +
                    "WHERE V1.Value like 'X%' and V1.RPathId = @pathtype \n" +
                    "and V2.RPathId = @pathdescription and V1.ID = V2.ID -1");
            }
        }
        //Approach: XAncestor
        else if(jRadioButton2.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XAncestor\nQuery pattern: /SigmodRecord/issue/[volume=24]/number");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT *\n" +
                    "FROM (SELECT DISTINCT L.Ances_PathID, L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where P.Ances_PathExp = '/SigmodRecord/issue' and L.Node_Name = 'volume' and L.Node_Value = '24') S\n" +
                    "JOIN\n" +
                    "(SELECT DISTINCT  L.Ances_PathID, L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where P.Ances_PathExp = '/SigmodRecord/issue' and L.Node_Name = 'number' and P.Ances_Pathid = L.Ances_Pathid) S1\n" +
                    "ON S.Ances_Pos = S1.Ances_Pos");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XAncestor\nQuery pattern: /dblp/mastersthesis[year=1992]/school");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT DISTINCT *\n" +
                    "FROM (SELECT DISTINCT L.Ances_PathID, L.Node_Name, L.Node_Value, L.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Dblp] L,\n" +
                    "[XAncestor].[dbo].[Ancestor_Path_Dblp] P \n" +
                    "Where P.Ances_PathExp = '/dblp/mastersthesis' and L.Node_Name = 'year' and L.Node_Value = '1992') S\n" +
                    "JOIN\n" +
                    "(SELECT DISTINCT  L1.Ances_PathID, L1.Node_Name, L1.Node_Value, L1.Ances_Pos\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Dblp] L1,\n" +
                    "[XAncestor].[dbo].[Ancestor_Path_Dblp] P1 \n" +
                    "Where P1.Ances_PathExp = '/dblp/mastersthesis' and L1.Node_Name = 'school' and P1.Ances_Pathid = L1.Ances_Pathid) S1\n" +
                    "ON S.Ances_Pos = S1.Ances_Pos");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XAncestor\nQuery pattern:/ProteinDatabase/ProteinEntry/header[uid like'X%']/accession");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select DISTINCT S1.Ances_PathExp, S1.Node_Name,S.Ances_Pos\n" +
                    "FROM (Select distinct P.Ances_PathExp, L1.Node_Name, L1.Node_Value, L1.Ances_Pos\n" +
                    "From [XAncestor].[dbo].[Leaf_Node_Psd] L1, [XAncestor].[dbo].[Ancestor_Path_Psd] P \n" +
                    "Where p.Ances_PathExp = '/ProteinDatabase/ProteinEntry/header' \n" +
                    "And L1.Ances_PathID = P.Ances_PathID And L1.Node_Name = 'uid' \n" +
                    "And L1.Node_Value like 'X%') S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT P.Ances_PathExp, L1.Node_Name, L1.Node_Value, L1.Ances_Pos\n" +
                    "From [XAncestor].[dbo].[Leaf_Node_Psd] L1, [XAncestor].[dbo].[Ancestor_Path_Psd] P \n" +
                    "Where p.Ances_PathExp = '/ProteinDatabase/ProteinEntry/header' And L1.Node_Name = 'accession' ) S1\n" +
                    "ON S.Ances_Pos = S1.Ances_Pos");
            }
        }
        //Approach: Mini-XML
        else if(jRadioButton8.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: Mini-XML\nQuery pattern: /SigmodRecord/issue/[volume=24]/number");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT * \n" +
                    "FROM (Select DISTINCT L0.LeafId,L0.Value, P0.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P0, [Mini-XML].[dbo].[LeafTable_Sigmod] L0\n" +
                    "Where P0.path = '/SigmodRecord/issue' and L0.name = 'volume' and L0.value = '24' and P0.pathid < L0.leafid) Y1\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L1.LeafId, L1.Value, P1.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P1, [Mini-XML].[dbo].[LeafTable_Sigmod] L1\n" +
                    "Where P1.path = '/SigmodRecord/issue' and L1.name = 'number' and P1.pathid < L1.leafid) Y2\n" +
                    "ON Y2.LeafId = Y1.LeafId +1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: Mini-XML\nQuery pattern: /dblp/mastersthesis[year=1992]/school");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select TOP 1 S.leafid,S.Value, S2.leafid, S2.value, S2.Path FROM \n" +
                    "(Select L0.LeafId,L0.Value,P0.PathId,P0.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P0, [Mini-XML].[dbo].[LeafTable_dblp] L0\n" +
                    "Where P0.path = '/dblp/mastersthesis' and L0.name = 'year' and L0.value = '1992' and P0.pathid < L0.leafid) S\n" +
                    "JOIN \n" +
                    "(Select L1.LeafId,L1.Value,P1.PathId,P1.Path\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P1, [Mini-XML].[dbo].[LeafTable_dblp] L1\n" +
                    "Where P1.path = '/dblp/mastersthesis' and L1.name = 'school' and P1.pathid < L1.leafid) S2\n" +
                    "ON S2.leafid = S.leafid+1\n" +
                    "GROUP BY  S.leafid,S.Value, S2.leafid, S2.value, S2.Path");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: Mini-XML\nQuery pattern: /ProteinDatabase/ProteinEntry/header[uid like'X%']/accession");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("SELECT S1.Value\n" +
                    "FROM (Select DISTINCT L.leafid,L.value\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where P.Path = '/ProteinDatabase/ProteinEntry/header' and L.name = 'uid' and L.value like 'X%') S\n" +
                    "JOIN\n" +
                    "(Select DISTINCT L.leafid,L.value\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where P.path = '/ProteinDatabase/ProteinEntry/header' and L.name = 'accession') S1\n" +
                    "ON S.leafid = S1.leafid -1");
            }
        }
        //Approach: XMAP
        else if(jRadioButton4.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nXMAP: XMAP\nQuery pattern: /SigmodRecord/issue/[volume=24]/number");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT DISTINCT V2.Node_Value,V2.ID\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'issue') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'volume') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value = '24') V\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'issue') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'number') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID) V2\n" +
                    "ON V.Order_id = V2.order_id -1 and V2.Node_Value != ''");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nXMAP: XMAP\nQuery pattern: /dblp/mastersthesis[year=1992]/school");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT DISTINCT *\n" +
                    "FROM (Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'mastersthesis') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'year') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value = '1992') V\n" +
                    "JOIN\n" +
                    "(Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'mastersthesis') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'school') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID) V2\n" +
                    "ON V.Order_id = V2.order_id -1");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nXMAP: XMAP\nQuery pattern: /ProteinDatabase/ProteinEntry/header[uid like'X%']/accession");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'ProteinDatabase') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'ProteinEntry') S2\n" +
                    "ON T1.Path like '%.' + S2.id + '.%'\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'header') S3\n" +
                    "ON T1.Path like '%.' + S3.id + '.%'\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'uid') S4\n" +
                    "ON T1.Path like '%.' + S4.id )\n" +
                    "SET @pathdescription = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'header') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'accession') T2\n" +
                    "ON T1.Path like '%.' + T2.id )\n" +
                    "SELECT DISTINCT D2.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_psd] D1, [XMap].[dbo].[Data_psd] D2\n" +
                    "WHERE D1.PathID = @pathtype and D2.PathID = @pathdescription\n" +
                    "and D1.Order_id = D2.Order_id -1 and D1.Node_Value like 'X%'");
            }
        }
        //Approach:XRecursive
        if(jRadioButton3.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XRecursive\nQuery pattern: /SigmodRecord/issue/[volume=24]/number");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM \n" +
                    "(SELECT a.id, a.tagName, a.pid, b.value\n" +
                    "FROM [XRecursive].[dbo].[tag_structure_sigmod] a \n" +
                    "LEFT JOIN [XRecursive].[dbo].[tag_value_sigmod] b \n" +
                    "on a.id = b.id where a.pid = 'issue' and b.value = '24' and a.tagName = 'volume') S\n" +
                    "JOIN \n" +
                    "(SELECT a.id, a.tagName, a.pid, b.value\n" +
                    "FROM [XRecursive].[dbo].[tag_structure_sigmod]  a LEFT JOIN [XRecursive].[dbo].[tag_value_sigmod] b \n" +
                    "on a.id = b.id \n" +
                    "where a.pid = 'issue' and a.tagName = 'number') S1\n" +
                    "ON S1.pid = S.pid and S1.id = S.id+1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XRecursive\nQuery pattern: /dblp/mastersthesis[year=1992]/school");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM \n" +
                    "(SELECT a.id, a.tagName, a.pid, b.value\n" +
                    "FROM [XRecursive].[dbo].[tag_structure_dblp] a \n" +
                    "LEFT JOIN [XRecursive].[dbo].[tag_value_dblp] b \n" +
                    "on a.id = b.id where a.pid = 'mastersthesis' and b.value = '1992' and a.tagName = 'year') S\n" +
                    "JOIN \n" +
                    "(SELECT a.id, a.tagName, a.pid, b.value\n" +
                    "FROM [XRecursive].[dbo].[tag_structure_dblp]  a LEFT JOIN [XRecursive].[dbo].[tag_value_dblp] b \n" +
                    "on a.id = b.id \n" +
                    "where a.pid = 'mastersthesis' and a.tagName = 'school') S1\n" +
                    "ON S1.pid = S.pid and S1.id = S.id+1");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Twig Query 1 ------\nApproach: XRecursive\nQuery pattern:/ProteinDatabase/ProteinEntry/header[uid like'X%']/accession");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM \n" +
                    "(SELECT a.id, a.tagName, a.pid, b.value\n" +
                    "FROM [XRecursive].[dbo].[tag_structure_psd] a \n" +
                    "LEFT JOIN [XRecursive].[dbo].[tag_value_psd] b \n" +
                    "on a.id = b.id where a.pid = 'header' and b.value like 'X%' and a.tagName = 'uid') S\n" +
                    "JOIN \n" +
                    "(SELECT a.id, a.tagName, a.pid, b.value\n" +
                    "FROM [XRecursive].[dbo].[tag_structure_psd]  a LEFT JOIN [XRecursive].[dbo].[tag_value_psd] b \n" +
                    "on a.id = b.id \n" +
                    "where a.pid = 'header' and a.tagName = 'accession') S1\n" +
                    "ON S1.pid = S.pid and S1.id = S.id+1");
            }
        }
    }//GEN-LAST:event_jRadioButton11ActionPerformed

    //Query 2
    private void jRadioButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton10ActionPerformed
        //Approach:XML-REG
        if(jRadioButton1.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XML-REG\nQuery pattern: //articles//author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT l.ID,l.Value\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where p.pathExp like '%articles%author' \n" +
                    "And L.RPathID = P.PathID ");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XML-REG\nQuery pattern: //article/tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P \n" +
                    "Where p.pathExp like '%article%tt' \n" +
                    "And L.RPathID = P.PathID ");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XML-REG\nQuery pattern: //reference//citation");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int\n" +
                    "SET @pathtype = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp like '%reference%citation' )\n" +
                    "SELECT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_psd] V\n" +
                    "WHERE V.RPathId = @pathtype");
            }
        }
        //Approach: XAncestor
        else if(jRadioButton2.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XAncestor\nQuery pattern: //articles//author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where p.Ances_PathExp Like '%/articles%' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'author'");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XAncestor\nQuery pattern: //article/tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Dblp] L, [XAncestor].[dbo].[Ancestor_Path_DBLP] P \n" +
                    "Where p.Ances_PathExp Like '%/article%' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'tt'");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XAncestor\nQuery pattern: //reference//citation");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_PSD] L, \n" +
                    "[XAncestor].[dbo].[Ancestor_Path_PSD] P \n" +
                    "Where p.Ances_PathExp Like '%refinfo%' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'citation'");
            }
        }
        //Approach: Mini-XML
        else if(jRadioButton8.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: Mini-XML\nQuery pattern: //articles//author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT L.Value, L.LeafId\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P, [Mini-XML].[dbo].[LeafTable_Sigmod] L\n" +
                    "Where path Like '%/articles/%' and L.name = 'author' ");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: Mini-XML\nQuery pattern: //article/tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("set statistics time on\n" +
                    "Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P, [Mini-XML].[dbo].[LeafTable_dblp] L\n" +
                    "Where path Like '%/article/%' and L.name = 'tt' and P.pathid = L.leafid -2 \n" +
                    "Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P\n" +
                    "Where path Like '%/article/%' \n" +
                    "order by pathid asc\n" +
                    "Select DISTINCT *\n" +
                    "from [Mini-XML].[dbo].[LeafTable_dblp] L\n" +
                    "Where L.name = 'tt' ");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: Mini-XML\nQuery pattern: //reference//citation");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select DISTINCT L.LeafId, L.Value\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where path Like '%refinfo' \n" +
                    "and L.name = 'citation' ");
            }
        }
        //Approach: XMAP
        else if(jRadioButton4.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nXMAP: XMAP\nQuery pattern: //articles//author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT U.ID, D.Order_id,D.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select T1.ID, T1.Path\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%.' + S1.id + '.%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'author') T2\n" +
                    "ON T1.Path like '%' + T2.id) U\n" +
                    "ON D.PathID = U.ID and D.Node_Value != ''");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nXMAP: XMAP\nQuery pattern: //article/tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select DISTINCT Order_id\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'article') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'tt') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID ");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nXMAP: XMAP\nQuery pattern: //reference//citation");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'reference') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'citation') S2\n" +
                    "ON T1.Path like '%.' + S2.id )");
            }
        }
        //Approach:XRecursive
        if(jRadioButton3.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XRecursive\nQuery pattern: //articles//author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XRecursive\nQuery pattern: //article/tt");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Not supported.");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 2 ------\nApproach: XRecursive\nQuery pattern://reference//citation");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Not supported.");
            }
        }
    }//GEN-LAST:event_jRadioButton10ActionPerformed

    //Query 1 (choose appraoch --> choose dataset --> choose query number)
    private void jRadioButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton9ActionPerformed
        //Approach:XML-REG
        if(jRadioButton1.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XMLREG\nQuery pattern: /SigmodRecord/issue/volume");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_Sigmod] L, [XMLREG].[dbo].[PathTable_Sigmod] P \n" +
                    "Where p.pathExp like '/SigmodRecord/issue/volume' \n" +
                    "And L.RPathID = P.PathID ");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XMLREG\nQuery pattern: /dblp/phdthesis/author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_DBLP] L, [XMLREG].[dbo].[Pathtable_DBLP] P \n" +
                    "Where p.pathExp like '/dblp/phdthesis/author' \n" +
                    "And L.RPathID = P.PathID ");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XMLREG\nQuery pattern: /ProteinDatabase/ProteinEntry/organism/formal");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int\n" +
                    "SET @pathtype = (SELECT P.PathId \n" +
                    "FROM [XMLREG].[dbo].[PathTable_psd] P\n" +
                    "WHERE P.pathexp = '/ProteinDatabase/ProteinEntry/organism/formal')\n" +
                    "SELECT *\n" +
                    "FROM [XMLREG].[dbo].[ValueTable_psd] V\n" +
                    "WHERE V.RPathId = @pathtype");
            }
        }
        //Approach: XAncestor
        else if(jRadioButton2.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XAncestor\nQuery pattern: /SigmodRecord/issue/volume");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Sigmod] L, [XAncestor].[dbo].[Ancestor_Path_Sigmod] P \n" +
                    "Where p.Ances_PathExp = '/SigmodRecord/issue' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'volume'");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XAncestor\nQuery pattern: /dblp/phdthesis/author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_Dblp] L, [XAncestor].[dbo].[Ancestor_Path_DBLP] P \n" +
                    "Where p.Ances_PathExp = '/dblp/phdthesis' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'author'");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XAncestor\nQuery pattern: /ProteinDatabase/ProteinEntry/organism/formal");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select *\n" +
                    "FROM [XAncestor].[dbo].[Leaf_Node_PSD] L, [XAncestor].[dbo].[Ancestor_Path_PSD] P \n" +
                    "Where p.Ances_PathExp like '/ProteinDatabase/ProteinEntry%' \n" +
                    "And L.Ances_PathID = P.Ances_PathID \n" +
                    "And L.Node_Name = 'formal'");
            }
        }
        //Approach: Mini-XML
        else if(jRadioButton8.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: Mini-XML\nQuery pattern: /SigmodRecord/issue/volume");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select P.pathid, P.path, L.leafid, L.value\n" +
                    "from [Mini-XML].[dbo].[PathTable_Sigmod] P, [Mini-XML].[dbo].[LeafTable_Sigmod] L\n" +
                    "Where p.path like '/SigmodRecord/issue'\n" +
                    "and L.name = 'volume' \n" +
                    "and P.pathid = L.leafid -1");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: Mini-XML\nQuery pattern: /dblp/phdthesis/author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select P.pathid, P.path, L.leafid, L.value\n" +
                    "from [Mini-XML].[dbo].[PathTable_dblp] P, [Mini-XML].[dbo].[LeafTable_dblp] L\n" +
                    "Where p.path like '/dblp/phdthesis'\n" +
                    "and L.name = 'author' \n" +
                    "and P.pathid = L.leafid -2");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: Mini-XML\nQuery pattern: /ProteinDatabase/ProteinEntry/organism/formal");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("Select DISTINCT L.LeafId, L.Value\n" +
                    "from [Mini-XML].[dbo].[PathTable_psd] P, [Mini-XML].[dbo].[LeafTable_psd] L\n" +
                    "Where p.path like '/ProteinDatabase/ProteinEntry/organism'\n" +
                    "and L.name = 'formal'");
            }
        }
        //Approach: XMAP
        else if(jRadioButton4.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nXMAP: XMAP\nQuery pattern: /SigmodRecord/issue/volume");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("Select DISTINCT *\n" +
                    "FROM [XMap].[dbo].[Data_sigmod] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_Sigmod] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'issue') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_Sigmod]\n" +
                    "where [Name] = 'volume') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID ");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nXMAP: XMAP\nQuery pattern: /dblp/phdthesis/author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("Select DISTINCT D.Node_Value\n" +
                    "FROM [XMap].[dbo].[Data_dblp] D\n" +
                    "JOIN (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_dblp] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'phdthesis') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_dblp]\n" +
                    "where [Name] = 'author') T2\n" +
                    "ON T1.Path like '%.' + T2.id ) U\n" +
                    "ON D.PathID = U.ID ");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nXMAP: XMAP\nQuery pattern: /ProteinDatabase/ProteinEntry/organism/formal");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("DECLARE @pathtype int, @pathdescription int\n" +
                    "SET @pathtype = (Select T1.ID\n" +
                    "FROM (Select P.ID, P.Path\n" +
                    "FROM  [XMap].[dbo].[Path_psd] P\n" +
                    "JOIN  (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'ProteinDatabase') S1\n" +
                    "ON P.path like '%' + S1.id + '%') T1\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'ProteinEntry') S2\n" +
                    "ON T1.Path like '%.' + S2.id + '.%'\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'organism') S3\n" +
                    "ON T1.Path like '%.' + S3.id + '.%'\n" +
                    "JOIN (select CAST(id AS VARCHAR) as id\n" +
                    "from [XMap].[dbo].[Vertex_psd]\n" +
                    "where [Name] = 'formal') S4\n" +
                    "ON T1.Path like '%.' + S4.id )");
            }
        }
        //Approach:XRecursive
        if(jRadioButton3.isSelected()){
            if(jRadioButton5.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XRecursive\nQuery pattern: /SigmodRecord/issue/volume");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: Sigmod.xml");
                jTextArea4.setText("SELECT * FROM [XRecursive].[dbo].[tag_value_sigmod] V \n" +
                    "JOIN [XRecursive].[dbo].[tag_structure_sigmod] S\n" +
                    "on S.tagName ='volume' where S.id = V.id and S.pid = 'issue'");
            }else if(jRadioButton6.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XRecursive\nQuery pattern:/dblp/phdthesis/author");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: DBLP.xml");
                jTextArea4.setText("SELECT * FROM [XRecursive].[dbo].[tag_value_dblp] V \n" +
                    "JOIN [XRecursive].[dbo].[tag_structure_dblp] S\n" +
                    "on S.tagName ='author' where S.id = V.id and S.pid = 'phdthesis'");
            }else if(jRadioButton7.isSelected()){
                this.jTextArea3.setText("\n------ Path Query 1 ------\nApproach: XRecursive\nQuery pattern: /ProteinDatabase/ProteinEntry/organism/formal");
                this.jTextArea3.setText(jTextArea3.getText() + "\nDataset: PSD7003.xml");
                jTextArea4.setText("SELECT * FROM [XRecursive].[dbo].[tag_value_psd] V \n" +
                    "JOIN [XRecursive].[dbo].[tag_structure_psd] S\n" +
                    "on S.tagName ='formal' where S.id = V.id and S.pid = 'organism'");
            }
        }
    }//GEN-LAST:event_jRadioButton9ActionPerformed

    //PSD7003.xml
    private void jRadioButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton7ActionPerformed

    //Dataset: DBLP.xml
    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton6ActionPerformed

//GEN-FIRST:event_jRadioButton5ActionPerformed
 //Dataset: Sigmod.xml
    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }     
//GEN-LAST:event_jRadioButton5ActionPerformed

    //Mini-XML
    private void jRadioButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton8ActionPerformed

    //XMAP Query
    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    //XRecursive
    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    //XAncestor
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    //XML-REG Query
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed
    
    //MAIN Function in Simulation Engine
    public static void main(String args[]) {
        // Set the Nimbus look and feel
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulation_Engine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulation_Engine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulation_Engine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulation_Engine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulation_Engine().setVisible(true);
            }});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton12;
    private javax.swing.JRadioButton jRadioButton13;
    private javax.swing.JRadioButton jRadioButton14;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    
    //load button function - load query
    private void loadquery(String str) throws SQLException, ClassNotFoundException {
        
       int i = 0;
       
        //XAncestor db connection       
        ConnectMSSQLServer connecting = new ConnectMSSQLServer();
        connecting.dbConnect();
                
        //start time 
        long t1 = System.currentTimeMillis();
        //create a Java Statement objection from the Connection object
        Statement stmt = Connect.conn.createStatement();
        // Execute query, and get a ResultSet object
        ResultSet rs = stmt.executeQuery(str);
         
        while (rs.next()) {
        i++;  }
        
        long t2 = (System.currentTimeMillis() - t1);
        //System.out.println(i);
        this.jTextArea3.setText(jTextArea2.getText() + jTextArea3.getText() +"\nTime taken: " + t2 + " ms");
        this.jTextArea3.setText(jTextArea2.getText() + jTextArea3.getText() +"\nReturn result: " + String.valueOf(i));
        jTextField3.setText(String.valueOf(t2 + " ms"));
        jTextField4.setText(String.valueOf(i)+ " rows");
        
                
        //XMLREG
        if(jRadioButton1 .isSelected())
            jTextField5.setText(String.valueOf(t2));
            //XAncestor
            else if(jRadioButton2.isSelected())
                jTextField6.setText(String.valueOf(t2));
            //XRecursive
            else if(jRadioButton3.isSelected())
                jTextField7.setText(String.valueOf(t2));
            //XMAP
            else if(jRadioButton4.isSelected())
                jTextField8.setText(String.valueOf(t2));
        //Mini-XML
            else if(jRadioButton8.isSelected())
                jTextField9.setText(String.valueOf(t2));
    }
}
